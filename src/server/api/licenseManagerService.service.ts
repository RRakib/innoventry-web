/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InnoventryLicenseInfo } from '../model/innoventryLicenseInfo';
import { LicenseDeactivationRequestInfo } from '../model/licenseDeactivationRequestInfo';
import { LicenseDeactivationResponse } from '../model/licenseDeactivationResponse';
import { LicenseDetail } from '../model/licenseDetail';
import { LicenseDetail2 } from '../model/licenseDetail2';
import { LicenseRequestInfo } from '../model/licenseRequestInfo';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LicenseManagerServiceService {

    protected basePath = '/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * activeLicense
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activeLicense(body?: LicenseRequestInfo, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public activeLicense(body?: LicenseRequestInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public activeLicense(body?: LicenseRequestInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public activeLicense(body?: LicenseRequestInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/admin/base/LicenseManagerService/activeLicense`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deactiveLicense
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deactiveLicense(body?: LicenseDeactivationRequestInfo, observe?: 'body', reportProgress?: boolean): Observable<LicenseDeactivationResponse>;
    public deactiveLicense(body?: LicenseDeactivationRequestInfo, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LicenseDeactivationResponse>>;
    public deactiveLicense(body?: LicenseDeactivationRequestInfo, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LicenseDeactivationResponse>>;
    public deactiveLicense(body?: LicenseDeactivationRequestInfo, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<LicenseDeactivationResponse>('post',`${this.basePath}/admin/base/LicenseManagerService/deactiveLicense`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAmcDate
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAmcDate(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAmcDate(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAmcDate(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAmcDate(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/admin/base/LicenseManagerService/getAmcDate`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getInfo
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getInfo(observe?: 'body', reportProgress?: boolean): Observable<InnoventryLicenseInfo>;
    public getInfo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InnoventryLicenseInfo>>;
    public getInfo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InnoventryLicenseInfo>>;
    public getInfo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InnoventryLicenseInfo>('get',`${this.basePath}/admin/base/LicenseManagerService/getInfo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getLicenseDetail
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLicenseDetail(observe?: 'body', reportProgress?: boolean): Observable<LicenseDetail>;
    public getLicenseDetail(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LicenseDetail>>;
    public getLicenseDetail(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LicenseDetail>>;
    public getLicenseDetail(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LicenseDetail>('get',`${this.basePath}/admin/base/LicenseManagerService/getLicenseDetail`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getLicenseDetail2
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLicenseDetail2(observe?: 'body', reportProgress?: boolean): Observable<LicenseDetail2>;
    public getLicenseDetail2(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<LicenseDetail2>>;
    public getLicenseDetail2(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<LicenseDetail2>>;
    public getLicenseDetail2(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<LicenseDetail2>('get',`${this.basePath}/admin/base/LicenseManagerService/getLicenseDetail2`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getLicenseKeyInfo
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLicenseKeyInfo(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getLicenseKeyInfo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getLicenseKeyInfo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getLicenseKeyInfo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/admin/base/LicenseManagerService/getLicenseKeyInfo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getProductKey
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProductKey(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getProductKey(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getProductKey(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getProductKey(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/admin/base/LicenseManagerService/getProductKey`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * hasLicenseType
     * 
     * @param appId 
     * @param version 
     * @param licenseType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hasLicenseType(appId?: string, version?: string, licenseType?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public hasLicenseType(appId?: string, version?: string, licenseType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public hasLicenseType(appId?: string, version?: string, licenseType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public hasLicenseType(appId?: string, version?: string, licenseType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (appId !== undefined && appId !== null) {
            queryParameters = queryParameters.set('appId', <any>appId);
        }
        if (version !== undefined && version !== null) {
            queryParameters = queryParameters.set('version', <any>version);
        }
        if (licenseType !== undefined && licenseType !== null) {
            queryParameters = queryParameters.set('licenseType', <any>licenseType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/base/LicenseManagerService/hasLicenseType`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * isTrial
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isTrial(observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isTrial(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isTrial(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isTrial(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/base/LicenseManagerService/isTrial`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * isUpgrading
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isUpgrading(observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isUpgrading(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isUpgrading(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isUpgrading(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/base/LicenseManagerService/isUpgrading`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * reloadLicenseInfo
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reloadLicenseInfo(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public reloadLicenseInfo(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public reloadLicenseInfo(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public reloadLicenseInfo(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/admin/base/LicenseManagerService/reloadLicenseInfo`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * setUpgrading
     * 
     * @param isUpgrading 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setUpgrading(isUpgrading?: boolean, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public setUpgrading(isUpgrading?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public setUpgrading(isUpgrading?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public setUpgrading(isUpgrading?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (isUpgrading !== undefined && isUpgrading !== null) {
            queryParameters = queryParameters.set('isUpgrading', <any>isUpgrading);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/admin/base/LicenseManagerService/setUpgrading`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
