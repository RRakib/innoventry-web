/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { FileResponse } from '../model/fileResponse';
import { HisabKhata } from '../model/hisabKhata';
import { HisabKhataServiceGetReportAsFile } from '../model/hisabKhataServiceGetReportAsFile';
import { HisabKhataServiceGetReportFileStream } from '../model/hisabKhataServiceGetReportFileStream';
import { HisabKhataServiceGetReportObj } from '../model/hisabKhataServiceGetReportObj';
import { HisabKhataServiceGetReportTypeArg } from '../model/hisabKhataServiceGetReportTypeArg';
import { HisabkhataArgument } from '../model/hisabkhataArgument';
import { ICustomReport } from '../model/iCustomReport';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class HisabKhataServiceService {

    protected basePath = '/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getHisabKhata
     * 
     * @param iLedger 
     * @param dateFrom 
     * @param dateTo 
     * @param interestFrom 
     * @param interestTo 
     * @param rate 
     * @param graceDays 
     * @param mandiExp 
     * @param shortage 
     * @param guashala 
     * @param bonus 
     * @param otherExp 
     * @param commission 
     * @param bardana 
     * @param cloth 
     * @param discount 
     * @param dateAfterUseSplInterest 
     * @param splInterest 
     * @param withOpeningBalance 
     * @param isMonthWise 
     * @param noOfDaysForDayWiseInterestCalculation 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHisabKhata(iLedger?: number, dateFrom?: string, dateTo?: string, interestFrom?: string, interestTo?: string, rate?: number, graceDays?: number, mandiExp?: number, shortage?: number, guashala?: number, bonus?: number, otherExp?: number, commission?: number, bardana?: number, cloth?: number, discount?: number, dateAfterUseSplInterest?: number, splInterest?: number, withOpeningBalance?: boolean, isMonthWise?: boolean, noOfDaysForDayWiseInterestCalculation?: number, observe?: 'body', reportProgress?: boolean): Observable<HisabKhata>;
    public getHisabKhata(iLedger?: number, dateFrom?: string, dateTo?: string, interestFrom?: string, interestTo?: string, rate?: number, graceDays?: number, mandiExp?: number, shortage?: number, guashala?: number, bonus?: number, otherExp?: number, commission?: number, bardana?: number, cloth?: number, discount?: number, dateAfterUseSplInterest?: number, splInterest?: number, withOpeningBalance?: boolean, isMonthWise?: boolean, noOfDaysForDayWiseInterestCalculation?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HisabKhata>>;
    public getHisabKhata(iLedger?: number, dateFrom?: string, dateTo?: string, interestFrom?: string, interestTo?: string, rate?: number, graceDays?: number, mandiExp?: number, shortage?: number, guashala?: number, bonus?: number, otherExp?: number, commission?: number, bardana?: number, cloth?: number, discount?: number, dateAfterUseSplInterest?: number, splInterest?: number, withOpeningBalance?: boolean, isMonthWise?: boolean, noOfDaysForDayWiseInterestCalculation?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HisabKhata>>;
    public getHisabKhata(iLedger?: number, dateFrom?: string, dateTo?: string, interestFrom?: string, interestTo?: string, rate?: number, graceDays?: number, mandiExp?: number, shortage?: number, guashala?: number, bonus?: number, otherExp?: number, commission?: number, bardana?: number, cloth?: number, discount?: number, dateAfterUseSplInterest?: number, splInterest?: number, withOpeningBalance?: boolean, isMonthWise?: boolean, noOfDaysForDayWiseInterestCalculation?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (iLedger !== undefined && iLedger !== null) {
            queryParameters = queryParameters.set('iLedger', <any>iLedger);
        }
        if (dateFrom !== undefined && dateFrom !== null) {
            queryParameters = queryParameters.set('dateFrom', <any>dateFrom);
        }
        if (dateTo !== undefined && dateTo !== null) {
            queryParameters = queryParameters.set('dateTo', <any>dateTo);
        }
        if (interestFrom !== undefined && interestFrom !== null) {
            queryParameters = queryParameters.set('interestFrom', <any>interestFrom);
        }
        if (interestTo !== undefined && interestTo !== null) {
            queryParameters = queryParameters.set('interestTo', <any>interestTo);
        }
        if (rate !== undefined && rate !== null) {
            queryParameters = queryParameters.set('rate', <any>rate);
        }
        if (graceDays !== undefined && graceDays !== null) {
            queryParameters = queryParameters.set('graceDays', <any>graceDays);
        }
        if (mandiExp !== undefined && mandiExp !== null) {
            queryParameters = queryParameters.set('mandiExp', <any>mandiExp);
        }
        if (shortage !== undefined && shortage !== null) {
            queryParameters = queryParameters.set('shortage', <any>shortage);
        }
        if (guashala !== undefined && guashala !== null) {
            queryParameters = queryParameters.set('guashala', <any>guashala);
        }
        if (bonus !== undefined && bonus !== null) {
            queryParameters = queryParameters.set('bonus', <any>bonus);
        }
        if (otherExp !== undefined && otherExp !== null) {
            queryParameters = queryParameters.set('otherExp', <any>otherExp);
        }
        if (commission !== undefined && commission !== null) {
            queryParameters = queryParameters.set('commission', <any>commission);
        }
        if (bardana !== undefined && bardana !== null) {
            queryParameters = queryParameters.set('bardana', <any>bardana);
        }
        if (cloth !== undefined && cloth !== null) {
            queryParameters = queryParameters.set('cloth', <any>cloth);
        }
        if (discount !== undefined && discount !== null) {
            queryParameters = queryParameters.set('discount', <any>discount);
        }
        if (dateAfterUseSplInterest !== undefined && dateAfterUseSplInterest !== null) {
            queryParameters = queryParameters.set('dateAfterUseSplInterest', <any>dateAfterUseSplInterest);
        }
        if (splInterest !== undefined && splInterest !== null) {
            queryParameters = queryParameters.set('splInterest', <any>splInterest);
        }
        if (withOpeningBalance !== undefined && withOpeningBalance !== null) {
            queryParameters = queryParameters.set('withOpeningBalance', <any>withOpeningBalance);
        }
        if (isMonthWise !== undefined && isMonthWise !== null) {
            queryParameters = queryParameters.set('isMonthWise', <any>isMonthWise);
        }
        if (noOfDaysForDayWiseInterestCalculation !== undefined && noOfDaysForDayWiseInterestCalculation !== null) {
            queryParameters = queryParameters.set('noOfDaysForDayWiseInterestCalculation', <any>noOfDaysForDayWiseInterestCalculation);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<HisabKhata>('get',`${this.basePath}/admin/grainagent/HisabKhataService/getHisabKhata`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReport
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportArg(body?: HisabkhataArgument, observe?: 'body', reportProgress?: boolean): Observable<HisabKhata>;
    public getReportArg(body?: HisabkhataArgument, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HisabKhata>>;
    public getReportArg(body?: HisabkhataArgument, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HisabKhata>>;
    public getReportArg(body?: HisabkhataArgument, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<HisabKhata>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getReport_arg`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReportAsFile
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportAsFile(body?: HisabKhataServiceGetReportAsFile, observe?: 'body', reportProgress?: boolean): Observable<FileResponse>;
    public getReportAsFile(body?: HisabKhataServiceGetReportAsFile, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileResponse>>;
    public getReportAsFile(body?: HisabKhataServiceGetReportAsFile, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileResponse>>;
    public getReportAsFile(body?: HisabKhataServiceGetReportAsFile, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FileResponse>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getReportAsFile`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReportFileStream
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportFileStream(body?: HisabKhataServiceGetReportFileStream, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getReportFileStream(body?: HisabKhataServiceGetReportFileStream, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getReportFileStream(body?: HisabKhataServiceGetReportFileStream, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getReportFileStream(body?: HisabKhataServiceGetReportFileStream, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getReportFileStream`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReportObj
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportObj(body?: HisabKhataServiceGetReportObj, observe?: 'body', reportProgress?: boolean): Observable<ICustomReport>;
    public getReportObj(body?: HisabKhataServiceGetReportObj, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ICustomReport>>;
    public getReportObj(body?: HisabKhataServiceGetReportObj, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ICustomReport>>;
    public getReportObj(body?: HisabKhataServiceGetReportObj, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ICustomReport>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getReportObj`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReportObject
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportObject(body?: HisabkhataArgument, observe?: 'body', reportProgress?: boolean): Observable<ICustomReport>;
    public getReportObject(body?: HisabkhataArgument, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ICustomReport>>;
    public getReportObject(body?: HisabkhataArgument, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ICustomReport>>;
    public getReportObject(body?: HisabkhataArgument, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ICustomReport>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getReportObject`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReport
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportTypeArg(body?: HisabKhataServiceGetReportTypeArg, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getReportTypeArg(body?: HisabKhataServiceGetReportTypeArg, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getReportTypeArg(body?: HisabKhataServiceGetReportTypeArg, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getReportTypeArg(body?: HisabKhataServiceGetReportTypeArg, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getReport_type_arg`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getTotalOfAmountAndInterest
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalOfAmountAndInterest(body?: HisabKhata, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public getTotalOfAmountAndInterest(body?: HisabKhata, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public getTotalOfAmountAndInterest(body?: HisabKhata, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public getTotalOfAmountAndInterest(body?: HisabKhata, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<number>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getTotalOfAmountAndInterest`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getTotalOfAmountJForm
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotalOfAmountJForm(body?: HisabKhata, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public getTotalOfAmountJForm(body?: HisabKhata, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public getTotalOfAmountJForm(body?: HisabKhata, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public getTotalOfAmountJForm(body?: HisabKhata, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<number>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getTotalOfAmountJForm`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getTotals
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTotals(body?: HisabKhata, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public getTotals(body?: HisabKhata, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public getTotals(body?: HisabKhata, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public getTotals(body?: HisabKhata, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<number>('post',`${this.basePath}/admin/grainagent/HisabKhataService/getTotals`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
