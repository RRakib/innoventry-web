/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { SearchReport } from '../model/searchReport';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SearchVoucherServiceService {

    protected basePath = '/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * gatVoucherTypeList
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public gatVoucherTypeList(observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public gatVoucherTypeList(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public gatVoucherTypeList(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public gatVoucherTypeList(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<string>>('get',`${this.basePath}/admin/inventory/SearchVoucherService/gatVoucherTypeList`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSearchVoucher
     * 
     * @param tid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSearchVoucherTid(tid?: number, observe?: 'body', reportProgress?: boolean): Observable<SearchReport>;
    public getSearchVoucherTid(tid?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchReport>>;
    public getSearchVoucherTid(tid?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchReport>>;
    public getSearchVoucherTid(tid?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tid !== undefined && tid !== null) {
            queryParameters = queryParameters.set('tid', <any>tid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SearchReport>('get',`${this.basePath}/admin/inventory/SearchVoucherService/getSearchVoucher_tid`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSearchVoucher
     * 
     * @param vouchreType 
     * @param ledger 
     * @param desc 
     * @param amountFrom 
     * @param amountTo 
     * @param dateFrom 
     * @param dateTo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSearchVoucherVouchreTypeLedgerDescAmountFromAmountToDateFromDateTo(vouchreType?: string, ledger?: number, desc?: string, amountFrom?: number, amountTo?: number, dateFrom?: string, dateTo?: string, observe?: 'body', reportProgress?: boolean): Observable<SearchReport>;
    public getSearchVoucherVouchreTypeLedgerDescAmountFromAmountToDateFromDateTo(vouchreType?: string, ledger?: number, desc?: string, amountFrom?: number, amountTo?: number, dateFrom?: string, dateTo?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchReport>>;
    public getSearchVoucherVouchreTypeLedgerDescAmountFromAmountToDateFromDateTo(vouchreType?: string, ledger?: number, desc?: string, amountFrom?: number, amountTo?: number, dateFrom?: string, dateTo?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchReport>>;
    public getSearchVoucherVouchreTypeLedgerDescAmountFromAmountToDateFromDateTo(vouchreType?: string, ledger?: number, desc?: string, amountFrom?: number, amountTo?: number, dateFrom?: string, dateTo?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (vouchreType !== undefined && vouchreType !== null) {
            queryParameters = queryParameters.set('vouchreType', <any>vouchreType);
        }
        if (ledger !== undefined && ledger !== null) {
            queryParameters = queryParameters.set('ledger', <any>ledger);
        }
        if (desc !== undefined && desc !== null) {
            queryParameters = queryParameters.set('desc', <any>desc);
        }
        if (amountFrom !== undefined && amountFrom !== null) {
            queryParameters = queryParameters.set('amountFrom', <any>amountFrom);
        }
        if (amountTo !== undefined && amountTo !== null) {
            queryParameters = queryParameters.set('amountTo', <any>amountTo);
        }
        if (dateFrom !== undefined && dateFrom !== null) {
            queryParameters = queryParameters.set('dateFrom', <any>dateFrom);
        }
        if (dateTo !== undefined && dateTo !== null) {
            queryParameters = queryParameters.set('dateTo', <any>dateTo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SearchReport>('get',`${this.basePath}/admin/inventory/SearchVoucherService/getSearchVoucher_vouchreType_ledger_desc_amountFrom_amountTo_dateFrom_dateTo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * searchVoucher
     * 
     * @param voucherNo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchVoucher(voucherNo?: string, observe?: 'body', reportProgress?: boolean): Observable<SearchReport>;
    public searchVoucher(voucherNo?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchReport>>;
    public searchVoucher(voucherNo?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchReport>>;
    public searchVoucher(voucherNo?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (voucherNo !== undefined && voucherNo !== null) {
            queryParameters = queryParameters.set('voucherNo', <any>voucherNo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SearchReport>('get',`${this.basePath}/admin/inventory/SearchVoucherService/searchVoucher`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
