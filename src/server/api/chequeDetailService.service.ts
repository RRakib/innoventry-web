/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ChequeDetailServiceGetReport } from '../model/chequeDetailServiceGetReport';
import { ChequeDetailServiceGetReportAsFile } from '../model/chequeDetailServiceGetReportAsFile';
import { ChequeDetailServiceGetReportObj } from '../model/chequeDetailServiceGetReportObj';
import { FileResponse } from '../model/fileResponse';
import { IChequeDetail } from '../model/iChequeDetail';
import { ICustomReport } from '../model/iCustomReport';
import { VoidResponse } from '../model/voidResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ChequeDetailServiceService {

    protected basePath = '/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * delete
     * 
     * @param pojo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public _delete(pojo?: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public _delete(pojo?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public _delete(pojo?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public _delete(pojo?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pojo !== undefined && pojo !== null) {
            queryParameters = queryParameters.set('pojo', <any>pojo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/admin/accounting/ChequeDetailService/delete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * canDelete
     * 
     * @param pojo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canDelete(pojo?: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public canDelete(pojo?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public canDelete(pojo?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public canDelete(pojo?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pojo !== undefined && pojo !== null) {
            queryParameters = queryParameters.set('pojo', <any>pojo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/accounting/ChequeDetailService/canDelete`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteById
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteById(id?: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public deleteById(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public deleteById(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public deleteById(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/admin/accounting/ChequeDetailService/deleteById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteObjectById
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteObjectById(id?: number, observe?: 'body', reportProgress?: boolean): Observable<VoidResponse>;
    public deleteObjectById(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<VoidResponse>>;
    public deleteObjectById(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<VoidResponse>>;
    public deleteObjectById(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<VoidResponse>('get',`${this.basePath}/admin/accounting/ChequeDetailService/deleteObjectById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findByGuid
     * 
     * @param uid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findByGuid(uid?: string, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public findByGuid(uid?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public findByGuid(uid?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public findByGuid(uid?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IChequeDetail>('get',`${this.basePath}/admin/accounting/ChequeDetailService/findByGuid`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * find
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findById(id?: number, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public findById(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public findById(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public findById(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IChequeDetail>('get',`${this.basePath}/admin/accounting/ChequeDetailService/findById`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findForUpdate
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findForUpdate(id?: number, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public findForUpdate(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public findForUpdate(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public findForUpdate(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IChequeDetail>('get',`${this.basePath}/admin/accounting/ChequeDetailService/findForUpdate`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getAvailableCheque
     * 
     * @param chequeBookNoFromOld 
     * @param chequeBookNoToOld 
     * @param ledgerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableCheque(chequeBookNoFromOld?: number, chequeBookNoToOld?: number, ledgerName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IChequeDetail>>;
    public getAvailableCheque(chequeBookNoFromOld?: number, chequeBookNoToOld?: number, ledgerName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IChequeDetail>>>;
    public getAvailableCheque(chequeBookNoFromOld?: number, chequeBookNoToOld?: number, ledgerName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IChequeDetail>>>;
    public getAvailableCheque(chequeBookNoFromOld?: number, chequeBookNoToOld?: number, ledgerName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (chequeBookNoFromOld !== undefined && chequeBookNoFromOld !== null) {
            queryParameters = queryParameters.set('chequeBookNoFromOld', <any>chequeBookNoFromOld);
        }
        if (chequeBookNoToOld !== undefined && chequeBookNoToOld !== null) {
            queryParameters = queryParameters.set('chequeBookNoToOld', <any>chequeBookNoToOld);
        }
        if (ledgerName !== undefined && ledgerName !== null) {
            queryParameters = queryParameters.set('ledgerName', <any>ledgerName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IChequeDetail>>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getAvailableCheque`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getChequeBookDetails
     * 
     * @param cheNoFrom 
     * @param cheNoTo 
     * @param ledger 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChequeBookDetailsCheNoFromCheNoToLedger(cheNoFrom?: number, cheNoTo?: number, ledger?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<IChequeDetail>>;
    public getChequeBookDetailsCheNoFromCheNoToLedger(cheNoFrom?: number, cheNoTo?: number, ledger?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IChequeDetail>>>;
    public getChequeBookDetailsCheNoFromCheNoToLedger(cheNoFrom?: number, cheNoTo?: number, ledger?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IChequeDetail>>>;
    public getChequeBookDetailsCheNoFromCheNoToLedger(cheNoFrom?: number, cheNoTo?: number, ledger?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cheNoFrom !== undefined && cheNoFrom !== null) {
            queryParameters = queryParameters.set('cheNoFrom', <any>cheNoFrom);
        }
        if (cheNoTo !== undefined && cheNoTo !== null) {
            queryParameters = queryParameters.set('cheNoTo', <any>cheNoTo);
        }
        if (ledger !== undefined && ledger !== null) {
            queryParameters = queryParameters.set('ledger', <any>ledger);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IChequeDetail>>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getChequeBookDetails_cheNoFrom_cheNoTo_ledger`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getChequeBookDetails
     * 
     * @param cheNoFrom 
     * @param cheNoTo 
     * @param ledgerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChequeBookDetailsCheNoFromCheNoToLedgerName(cheNoFrom?: number, cheNoTo?: number, ledgerName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IChequeDetail>>;
    public getChequeBookDetailsCheNoFromCheNoToLedgerName(cheNoFrom?: number, cheNoTo?: number, ledgerName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IChequeDetail>>>;
    public getChequeBookDetailsCheNoFromCheNoToLedgerName(cheNoFrom?: number, cheNoTo?: number, ledgerName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IChequeDetail>>>;
    public getChequeBookDetailsCheNoFromCheNoToLedgerName(cheNoFrom?: number, cheNoTo?: number, ledgerName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cheNoFrom !== undefined && cheNoFrom !== null) {
            queryParameters = queryParameters.set('cheNoFrom', <any>cheNoFrom);
        }
        if (cheNoTo !== undefined && cheNoTo !== null) {
            queryParameters = queryParameters.set('cheNoTo', <any>cheNoTo);
        }
        if (ledgerName !== undefined && ledgerName !== null) {
            queryParameters = queryParameters.set('ledgerName', <any>ledgerName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IChequeDetail>>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getChequeBookDetails_cheNoFrom_cheNoTo_ledgerName`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCheque
     * 
     * @param chequeNo 
     * @param ledgerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChequeChequeNoLedgerName(chequeNo?: number, ledgerName?: string, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public getChequeChequeNoLedgerName(chequeNo?: number, ledgerName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public getChequeChequeNoLedgerName(chequeNo?: number, ledgerName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public getChequeChequeNoLedgerName(chequeNo?: number, ledgerName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (chequeNo !== undefined && chequeNo !== null) {
            queryParameters = queryParameters.set('chequeNo', <any>chequeNo);
        }
        if (ledgerName !== undefined && ledgerName !== null) {
            queryParameters = queryParameters.set('ledgerName', <any>ledgerName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IChequeDetail>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getCheque_chequeNo_ledgerName`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCheque
     * 
     * @param longFromText 
     * @param paymentLedger 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChequeLongFromTextPaymentLedger(longFromText?: number, paymentLedger?: number, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public getChequeLongFromTextPaymentLedger(longFromText?: number, paymentLedger?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public getChequeLongFromTextPaymentLedger(longFromText?: number, paymentLedger?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public getChequeLongFromTextPaymentLedger(longFromText?: number, paymentLedger?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (longFromText !== undefined && longFromText !== null) {
            queryParameters = queryParameters.set('longFromText', <any>longFromText);
        }
        if (paymentLedger !== undefined && paymentLedger !== null) {
            queryParameters = queryParameters.set('paymentLedger', <any>paymentLedger);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IChequeDetail>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getCheque_longFromText_paymentLedger`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCheque
     * 
     * @param transactionNo 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChequeTransactionNo(transactionNo?: number, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public getChequeTransactionNo(transactionNo?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public getChequeTransactionNo(transactionNo?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public getChequeTransactionNo(transactionNo?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (transactionNo !== undefined && transactionNo !== null) {
            queryParameters = queryParameters.set('transactionNo', <any>transactionNo);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IChequeDetail>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getCheque_transactionNo`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCheque
     * 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChequeTx(tx?: number, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public getChequeTx(tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public getChequeTx(tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public getChequeTx(tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<IChequeDetail>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getCheque_tx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getObjects
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getObjects(observe?: 'body', reportProgress?: boolean): Observable<Array<IChequeDetail>>;
    public getObjects(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IChequeDetail>>>;
    public getObjects(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IChequeDetail>>>;
    public getObjects(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IChequeDetail>>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getObjects`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReport
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReport(body?: ChequeDetailServiceGetReport, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getReport(body?: ChequeDetailServiceGetReport, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getReport(body?: ChequeDetailServiceGetReport, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getReport(body?: ChequeDetailServiceGetReport, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/admin/accounting/ChequeDetailService/getReport`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReportAsFile
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportAsFile(body?: ChequeDetailServiceGetReportAsFile, observe?: 'body', reportProgress?: boolean): Observable<FileResponse>;
    public getReportAsFile(body?: ChequeDetailServiceGetReportAsFile, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FileResponse>>;
    public getReportAsFile(body?: ChequeDetailServiceGetReportAsFile, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FileResponse>>;
    public getReportAsFile(body?: ChequeDetailServiceGetReportAsFile, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<FileResponse>('post',`${this.basePath}/admin/accounting/ChequeDetailService/getReportAsFile`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getReportObj
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportObj(body?: ChequeDetailServiceGetReportObj, observe?: 'body', reportProgress?: boolean): Observable<ICustomReport>;
    public getReportObj(body?: ChequeDetailServiceGetReportObj, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ICustomReport>>;
    public getReportObj(body?: ChequeDetailServiceGetReportObj, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ICustomReport>>;
    public getReportObj(body?: ChequeDetailServiceGetReportObj, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ICustomReport>('post',`${this.basePath}/admin/accounting/ChequeDetailService/getReportObj`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getUsedCheque
     * 
     * @param cheNoFrom 
     * @param cheNoTo 
     * @param ledger 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsedChequeCheNoFromCheNoToLedger(cheNoFrom?: number, cheNoTo?: number, ledger?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<IChequeDetail>>;
    public getUsedChequeCheNoFromCheNoToLedger(cheNoFrom?: number, cheNoTo?: number, ledger?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IChequeDetail>>>;
    public getUsedChequeCheNoFromCheNoToLedger(cheNoFrom?: number, cheNoTo?: number, ledger?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IChequeDetail>>>;
    public getUsedChequeCheNoFromCheNoToLedger(cheNoFrom?: number, cheNoTo?: number, ledger?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cheNoFrom !== undefined && cheNoFrom !== null) {
            queryParameters = queryParameters.set('cheNoFrom', <any>cheNoFrom);
        }
        if (cheNoTo !== undefined && cheNoTo !== null) {
            queryParameters = queryParameters.set('cheNoTo', <any>cheNoTo);
        }
        if (ledger !== undefined && ledger !== null) {
            queryParameters = queryParameters.set('ledger', <any>ledger);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IChequeDetail>>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getUsedCheque_cheNoFrom_cheNoTo_ledger`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getUsedCheque
     * 
     * @param cheNoFrom 
     * @param cheNoTo 
     * @param ledgerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsedChequeCheNoFromCheNoToLedgerName(cheNoFrom?: number, cheNoTo?: number, ledgerName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IChequeDetail>>;
    public getUsedChequeCheNoFromCheNoToLedgerName(cheNoFrom?: number, cheNoTo?: number, ledgerName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IChequeDetail>>>;
    public getUsedChequeCheNoFromCheNoToLedgerName(cheNoFrom?: number, cheNoTo?: number, ledgerName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IChequeDetail>>>;
    public getUsedChequeCheNoFromCheNoToLedgerName(cheNoFrom?: number, cheNoTo?: number, ledgerName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cheNoFrom !== undefined && cheNoFrom !== null) {
            queryParameters = queryParameters.set('cheNoFrom', <any>cheNoFrom);
        }
        if (cheNoTo !== undefined && cheNoTo !== null) {
            queryParameters = queryParameters.set('cheNoTo', <any>cheNoTo);
        }
        if (ledgerName !== undefined && ledgerName !== null) {
            queryParameters = queryParameters.set('ledgerName', <any>ledgerName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IChequeDetail>>('get',`${this.basePath}/admin/accounting/ChequeDetailService/getUsedCheque_cheNoFrom_cheNoTo_ledgerName`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * isCheque
     * 
     * @param chequeNo 
     * @param ledgerName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isCheque(chequeNo?: number, ledgerName?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isCheque(chequeNo?: number, ledgerName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isCheque(chequeNo?: number, ledgerName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isCheque(chequeNo?: number, ledgerName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (chequeNo !== undefined && chequeNo !== null) {
            queryParameters = queryParameters.set('chequeNo', <any>chequeNo);
        }
        if (ledgerName !== undefined && ledgerName !== null) {
            queryParameters = queryParameters.set('ledgerName', <any>ledgerName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/accounting/ChequeDetailService/isCheque`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * isChequeUsed
     * 
     * @param cheque 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isChequeUsed(cheque?: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isChequeUsed(cheque?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isChequeUsed(cheque?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isChequeUsed(cheque?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cheque !== undefined && cheque !== null) {
            queryParameters = queryParameters.set('cheque', <any>cheque);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('get',`${this.basePath}/admin/accounting/ChequeDetailService/isChequeUsed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * save
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public save(body?: IChequeDetail, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public save(body?: IChequeDetail, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public save(body?: IChequeDetail, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public save(body?: IChequeDetail, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IChequeDetail>('post',`${this.basePath}/admin/accounting/ChequeDetailService/save`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update(body?: IChequeDetail, observe?: 'body', reportProgress?: boolean): Observable<IChequeDetail>;
    public update(body?: IChequeDetail, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IChequeDetail>>;
    public update(body?: IChequeDetail, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IChequeDetail>>;
    public update(body?: IChequeDetail, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IChequeDetail>('post',`${this.basePath}/admin/accounting/ChequeDetailService/update`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
