/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InventoryAllBillPrintServiceGetPrintFijiReportTypeResTxFormatIndex } from '../model/inventoryAllBillPrintServiceGetPrintFijiReportTypeResTxFormatIndex';
import { InventoryAllBillPrintServiceGetPrintFijiResTxFormatIndex } from '../model/inventoryAllBillPrintServiceGetPrintFijiResTxFormatIndex';
import { Report } from '../model/report';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class InventoryAllBillPrintServiceService {

    protected basePath = '/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getChallanTxPrintStream
     * 
     * @param reportType 
     * @param tx 
     * @param index 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChallanTxPrintStream(reportType?: string, tx?: number, index?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getChallanTxPrintStream(reportType?: string, tx?: number, index?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getChallanTxPrintStream(reportType?: string, tx?: number, index?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getChallanTxPrintStream(reportType?: string, tx?: number, index?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (index !== undefined && index !== null) {
            queryParameters = queryParameters.set('index', <any>index);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getChallanTxPrintStream`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getChallanTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChallanTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getChallanTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getChallanTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getChallanTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getChallanTxRpt_reportType_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getChallanTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getChallanTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getChallanTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getChallanTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getChallanTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getChallanTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCrNoteInvTxInvoice
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrNoteInvTxInvoice(reportType?: string, tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getCrNoteInvTxInvoice(reportType?: string, tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getCrNoteInvTxInvoice(reportType?: string, tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getCrNoteInvTxInvoice(reportType?: string, tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getCrNoteInvTxInvoice`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCrNoteInvTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCrNoteInvTxRpt(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getCrNoteInvTxRpt(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getCrNoteInvTxRpt(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getCrNoteInvTxRpt(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getCrNoteInvTxRpt`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDrNoteInvTxInvoice
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDrNoteInvTxInvoice(reportType?: string, tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getDrNoteInvTxInvoice(reportType?: string, tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getDrNoteInvTxInvoice(reportType?: string, tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getDrNoteInvTxInvoice(reportType?: string, tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getDrNoteInvTxInvoice`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getDrNoteInvTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDrNoteInvTxRpt(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getDrNoteInvTxRpt(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getDrNoteInvTxRpt(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getDrNoteInvTxRpt(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getDrNoteInvTxRpt`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getExpenseTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExpenseTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getExpenseTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getExpenseTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getExpenseTxRptReportTypeTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getExpenseTxRpt_reportType_tx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getExpenseTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExpenseTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getExpenseTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getExpenseTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getExpenseTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getExpenseTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getJobWorkTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobWorkTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getJobWorkTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getJobWorkTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getJobWorkTxRptReportTypeTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getJobWorkTxRpt_reportType_tx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getJobWorkTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJobWorkTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getJobWorkTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getJobWorkTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getJobWorkTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getJobWorkTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getLedgerLabelForTransport
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLedgerLabelForTransport(id?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getLedgerLabelForTransport(id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getLedgerLabelForTransport(id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getLedgerLabelForTransport(id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getLedgerLabelForTransport`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPOOutWardTxOrderRpt
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPOOutWardTxOrderRptReportTypeTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPOOutWardTxOrderRptReportTypeTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPOOutWardTxOrderRptReportTypeTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPOOutWardTxOrderRptReportTypeTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPOOutWardTxOrderRpt_reportType_tx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPOOutWardTxOrderRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPOOutWardTxOrderRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getPOOutWardTxOrderRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getPOOutWardTxOrderRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getPOOutWardTxOrderRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPOOutWardTxOrderRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPOOutWardTxPrintFileStream
     * 
     * @param reportType 
     * @param pOOutwardTx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPOOutWardTxPrintFileStream(reportType?: string, pOOutwardTx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPOOutWardTxPrintFileStream(reportType?: string, pOOutwardTx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPOOutWardTxPrintFileStream(reportType?: string, pOOutwardTx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPOOutWardTxPrintFileStream(reportType?: string, pOOutwardTx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (pOOutwardTx !== undefined && pOOutwardTx !== null) {
            queryParameters = queryParameters.set('POOutwardTx', <any>pOOutwardTx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPOOutWardTxPrintFileStream`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPOSaleOrderTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPOSaleOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPOSaleOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPOSaleOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPOSaleOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPOSaleOrderTxRpt_reportType_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPOSaleOrderTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPOSaleOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getPOSaleOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getPOSaleOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getPOSaleOrderTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPOSaleOrderTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPrintChallanRptForSaleOrderTx
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPrintChallanRptForSaleOrderTx(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getPrintChallanRptForSaleOrderTx(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getPrintChallanRptForSaleOrderTx(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getPrintChallanRptForSaleOrderTx(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPrintChallanRptForSaleOrderTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPrintFiji
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPrintFijiReportTypeResTxFormatIndex(body?: InventoryAllBillPrintServiceGetPrintFijiReportTypeResTxFormatIndex, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPrintFijiReportTypeResTxFormatIndex(body?: InventoryAllBillPrintServiceGetPrintFijiReportTypeResTxFormatIndex, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPrintFijiReportTypeResTxFormatIndex(body?: InventoryAllBillPrintServiceGetPrintFijiReportTypeResTxFormatIndex, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPrintFijiReportTypeResTxFormatIndex(body?: InventoryAllBillPrintServiceGetPrintFijiReportTypeResTxFormatIndex, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPrintFiji_reportType_res_tx_format_index`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPrintFiji
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPrintFijiResTxFormatIndex(body?: InventoryAllBillPrintServiceGetPrintFijiResTxFormatIndex, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getPrintFijiResTxFormatIndex(body?: InventoryAllBillPrintServiceGetPrintFijiResTxFormatIndex, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getPrintFijiResTxFormatIndex(body?: InventoryAllBillPrintServiceGetPrintFijiResTxFormatIndex, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getPrintFijiResTxFormatIndex(body?: InventoryAllBillPrintServiceGetPrintFijiResTxFormatIndex, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Report>('post',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPrintFiji_res_tx_format_index`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPrintIInwardQuotationTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPrintIInwardQuotationTxRpt(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getPrintIInwardQuotationTxRpt(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getPrintIInwardQuotationTxRpt(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getPrintIInwardQuotationTxRpt(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPrintIInwardQuotationTxRpt`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPrintIInwardQuotationTxRptInvoice
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPrintIInwardQuotationTxRptInvoice(reportType?: string, tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPrintIInwardQuotationTxRptInvoice(reportType?: string, tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPrintIInwardQuotationTxRptInvoice(reportType?: string, tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPrintIInwardQuotationTxRptInvoice(reportType?: string, tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPrintIInwardQuotationTxRptInvoice`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getProFromaRefundTxOrderRpt
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProFromaRefundTxOrderRptReportTypeTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getProFromaRefundTxOrderRptReportTypeTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getProFromaRefundTxOrderRptReportTypeTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getProFromaRefundTxOrderRptReportTypeTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getProFromaRefundTxOrderRpt_reportType_tx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getProFromaRefundTxOrderRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProFromaRefundTxOrderRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getProFromaRefundTxOrderRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getProFromaRefundTxOrderRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getProFromaRefundTxOrderRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getProFromaRefundTxOrderRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getProFromaTxOrderRpt
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProFromaTxOrderRpt(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getProFromaTxOrderRpt(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getProFromaTxOrderRpt(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getProFromaTxOrderRpt(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getProFromaTxOrderRpt`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getProfromaTxReportOrderRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfromaTxReportOrderRpt(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getProfromaTxReportOrderRpt(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getProfromaTxReportOrderRpt(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getProfromaTxReportOrderRpt(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getProfromaTxReportOrderRpt`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPurchaseEnquiryTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurchaseEnquiryTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPurchaseEnquiryTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPurchaseEnquiryTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPurchaseEnquiryTxRptReportTypeTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPurchaseEnquiryTxRpt_reportType_tx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPurchaseEnquiryTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurchaseEnquiryTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getPurchaseEnquiryTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getPurchaseEnquiryTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getPurchaseEnquiryTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPurchaseEnquiryTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPurchaseOrderPrintStream
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurchaseOrderPrintStream(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPurchaseOrderPrintStream(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPurchaseOrderPrintStream(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPurchaseOrderPrintStream(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPurchaseOrderPrintStream`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPurchaseReturnOrderTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurchaseReturnOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPurchaseReturnOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPurchaseReturnOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPurchaseReturnOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPurchaseReturnOrderTxRpt_reportType_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPurchaseReturnOrderTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurchaseReturnOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getPurchaseReturnOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getPurchaseReturnOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getPurchaseReturnOrderTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPurchaseReturnOrderTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPurchaseTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurchaseTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getPurchaseTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getPurchaseTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getPurchaseTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPurchaseTxRpt_reportType_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getPurchaseTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPurchaseTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getPurchaseTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getPurchaseTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getPurchaseTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getPurchaseTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getQuotationOrderRpt
     * 
     * @param tx 
     * @param format 
     * @param index 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuotationOrderRpt(tx?: number, format?: string, index?: number, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getQuotationOrderRpt(tx?: number, format?: string, index?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getQuotationOrderRpt(tx?: number, format?: string, index?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getQuotationOrderRpt(tx?: number, format?: string, index?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }
        if (index !== undefined && index !== null) {
            queryParameters = queryParameters.set('index', <any>index);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getQuotationOrderRpt`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getQuotationPrint
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param index 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuotationPrint(reportType?: string, tx?: number, format?: string, index?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getQuotationPrint(reportType?: string, tx?: number, format?: string, index?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getQuotationPrint(reportType?: string, tx?: number, format?: string, index?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getQuotationPrint(reportType?: string, tx?: number, format?: string, index?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }
        if (index !== undefined && index !== null) {
            queryParameters = queryParameters.set('index', <any>index);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getQuotationPrint`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getQuotationPrintStream
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuotationPrintStream(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getQuotationPrintStream(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getQuotationPrintStream(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getQuotationPrintStream(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getQuotationPrintStream`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleEnquiryTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleEnquiryTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSaleEnquiryTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSaleEnquiryTxRptReportTypeTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSaleEnquiryTxRptReportTypeTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleEnquiryTxRpt_reportType_tx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleEnquiryTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleEnquiryTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getSaleEnquiryTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getSaleEnquiryTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getSaleEnquiryTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleEnquiryTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleOrderPrint
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param index 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleOrderPrint(reportType?: string, tx?: number, format?: string, index?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSaleOrderPrint(reportType?: string, tx?: number, format?: string, index?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSaleOrderPrint(reportType?: string, tx?: number, format?: string, index?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSaleOrderPrint(reportType?: string, tx?: number, format?: string, index?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }
        if (index !== undefined && index !== null) {
            queryParameters = queryParameters.set('index', <any>index);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleOrderPrint`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleOrderPrintStream
     * 
     * @param reportType 
     * @param tx 
     * @param index 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleOrderPrintStream(reportType?: string, tx?: number, index?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSaleOrderPrintStream(reportType?: string, tx?: number, index?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSaleOrderPrintStream(reportType?: string, tx?: number, index?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSaleOrderPrintStream(reportType?: string, tx?: number, index?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (index !== undefined && index !== null) {
            queryParameters = queryParameters.set('index', <any>index);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleOrderPrintStream`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleOrderRpt
     * 
     * @param tx 
     * @param format 
     * @param index 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleOrderRpt(tx?: number, format?: string, index?: number, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getSaleOrderRpt(tx?: number, format?: string, index?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getSaleOrderRpt(tx?: number, format?: string, index?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getSaleOrderRpt(tx?: number, format?: string, index?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }
        if (index !== undefined && index !== null) {
            queryParameters = queryParameters.set('index', <any>index);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleOrderRpt`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleOrderTxPrintCount
     * 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleOrderTxPrintCount(tx?: number, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public getSaleOrderTxPrintCount(tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public getSaleOrderTxPrintCount(tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public getSaleOrderTxPrintCount(tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<number>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleOrderTxPrintCount`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleReturnOrderPrintStream
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleReturnOrderPrintStream(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSaleReturnOrderPrintStream(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSaleReturnOrderPrintStream(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSaleReturnOrderPrintStream(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleReturnOrderPrintStream`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleReturnOrderTxRpt
     * 
     * @param reportType 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleReturnOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getSaleReturnOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getSaleReturnOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getSaleReturnOrderTxRptReportTypeTxFormat(reportType?: string, tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleReturnOrderTxRpt_reportType_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getSaleReturnOrderTxRpt
     * 
     * @param tx 
     * @param format 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSaleReturnOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getSaleReturnOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getSaleReturnOrderTxRptTxFormat(tx?: number, format?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getSaleReturnOrderTxRptTxFormat(tx?: number, format?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }
        if (format !== undefined && format !== null) {
            queryParameters = queryParameters.set('format', <any>format);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/getSaleReturnOrderTxRpt_tx_format`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printChallanForSaleOrderTx
     * 
     * @param reportType 
     * @param saleOrderId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printChallanForSaleOrderTx(reportType?: string, saleOrderId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public printChallanForSaleOrderTx(reportType?: string, saleOrderId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public printChallanForSaleOrderTx(reportType?: string, saleOrderId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public printChallanForSaleOrderTx(reportType?: string, saleOrderId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (saleOrderId !== undefined && saleOrderId !== null) {
            queryParameters = queryParameters.set('saleOrderId', <any>saleOrderId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printChallanForSaleOrderTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printConsumptionRptTx
     * 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printConsumptionRptTx(tx?: number, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public printConsumptionRptTx(tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public printConsumptionRptTx(tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public printConsumptionRptTx(tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printConsumptionRptTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printConsumptionTx
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printConsumptionTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public printConsumptionTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public printConsumptionTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public printConsumptionTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printConsumptionTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printProductionRptTx
     * 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printProductionRptTx(tx?: number, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public printProductionRptTx(tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public printProductionRptTx(tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public printProductionRptTx(tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printProductionRptTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printProductionTx
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printProductionTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public printProductionTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public printProductionTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public printProductionTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printProductionTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printStockShortageRptTx
     * 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printStockShortageRptTx(tx?: number, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public printStockShortageRptTx(tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public printStockShortageRptTx(tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public printStockShortageRptTx(tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printStockShortageRptTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printStockShortageTx
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printStockShortageTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public printStockShortageTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public printStockShortageTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public printStockShortageTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printStockShortageTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printStockSurplusRptTx
     * 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printStockSurplusRptTx(tx?: number, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public printStockSurplusRptTx(tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public printStockSurplusRptTx(tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public printStockSurplusRptTx(tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printStockSurplusRptTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printStockSurplusTx
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printStockSurplusTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public printStockSurplusTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public printStockSurplusTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public printStockSurplusTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printStockSurplusTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printStockTransferRptTx
     * 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printStockTransferRptTx(tx?: number, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public printStockTransferRptTx(tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public printStockTransferRptTx(tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public printStockTransferRptTx(tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Report>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printStockTransferRptTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * printStockTransferTx
     * 
     * @param reportType 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public printStockTransferTx(reportType?: string, tx?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public printStockTransferTx(reportType?: string, tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public printStockTransferTx(reportType?: string, tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public printStockTransferTx(reportType?: string, tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportType !== undefined && reportType !== null) {
            queryParameters = queryParameters.set('reportType', <any>reportType);
        }
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/admin/inventory/InventoryAllBillPrintService/printStockTransferTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
