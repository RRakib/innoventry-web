/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { GSTR1Report } from '../model/gSTR1Report';
import { GSTR2Report } from '../model/gSTR2Report';
import { GSTR3Report } from '../model/gSTR3Report';
import { GSTR9Report } from '../model/gSTR9Report';
import { GSTReportServiceExportGstr9Excel } from '../model/gSTReportServiceExportGstr9Excel';
import { GSTReportServiceGetGSTR1ReportRawExcel } from '../model/gSTReportServiceGetGSTR1ReportRawExcel';
import { Gstr2MatchingReport } from '../model/gstr2MatchingReport';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class GSTReportServiceService {

    protected basePath = '/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * exportGstr9Excel
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public exportGstr9Excel(body?: GSTReportServiceExportGstr9Excel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public exportGstr9Excel(body?: GSTReportServiceExportGstr9Excel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public exportGstr9Excel(body?: GSTReportServiceExportGstr9Excel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public exportGstr9Excel(body?: GSTReportServiceExportGstr9Excel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/admin/inventory/GSTReportService/exportGstr9Excel`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getGSTR1Report
     * 
     * @param from 
     * @param to 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGSTR1Report(from?: string, to?: string, observe?: 'body', reportProgress?: boolean): Observable<GSTR1Report>;
    public getGSTR1Report(from?: string, to?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GSTR1Report>>;
    public getGSTR1Report(from?: string, to?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GSTR1Report>>;
    public getGSTR1Report(from?: string, to?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (from !== undefined && from !== null) {
            queryParameters = queryParameters.set('from', <any>from);
        }
        if (to !== undefined && to !== null) {
            queryParameters = queryParameters.set('to', <any>to);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GSTR1Report>('get',`${this.basePath}/admin/inventory/GSTReportService/getGSTR1Report`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getGSTR1ReportRawExcel
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGSTR1ReportRawExcel(body?: GSTReportServiceGetGSTR1ReportRawExcel, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getGSTR1ReportRawExcel(body?: GSTReportServiceGetGSTR1ReportRawExcel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getGSTR1ReportRawExcel(body?: GSTReportServiceGetGSTR1ReportRawExcel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getGSTR1ReportRawExcel(body?: GSTReportServiceGetGSTR1ReportRawExcel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/admin/inventory/GSTReportService/getGSTR1ReportRawExcel`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getGSTR2Report
     * 
     * @param from 
     * @param to 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGSTR2Report(from?: string, to?: string, observe?: 'body', reportProgress?: boolean): Observable<GSTR2Report>;
    public getGSTR2Report(from?: string, to?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GSTR2Report>>;
    public getGSTR2Report(from?: string, to?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GSTR2Report>>;
    public getGSTR2Report(from?: string, to?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (from !== undefined && from !== null) {
            queryParameters = queryParameters.set('from', <any>from);
        }
        if (to !== undefined && to !== null) {
            queryParameters = queryParameters.set('to', <any>to);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GSTR2Report>('get',`${this.basePath}/admin/inventory/GSTReportService/getGSTR2Report`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getGSTR3Report
     * 
     * @param from 
     * @param to 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGSTR3Report(from?: string, to?: string, observe?: 'body', reportProgress?: boolean): Observable<GSTR3Report>;
    public getGSTR3Report(from?: string, to?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GSTR3Report>>;
    public getGSTR3Report(from?: string, to?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GSTR3Report>>;
    public getGSTR3Report(from?: string, to?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (from !== undefined && from !== null) {
            queryParameters = queryParameters.set('from', <any>from);
        }
        if (to !== undefined && to !== null) {
            queryParameters = queryParameters.set('to', <any>to);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GSTR3Report>('get',`${this.basePath}/admin/inventory/GSTReportService/getGSTR3Report`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getGSTR9Report
     * 
     * @param from 
     * @param to 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGSTR9Report(from?: string, to?: string, observe?: 'body', reportProgress?: boolean): Observable<GSTR9Report>;
    public getGSTR9Report(from?: string, to?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GSTR9Report>>;
    public getGSTR9Report(from?: string, to?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GSTR9Report>>;
    public getGSTR9Report(from?: string, to?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (from !== undefined && from !== null) {
            queryParameters = queryParameters.set('from', <any>from);
        }
        if (to !== undefined && to !== null) {
            queryParameters = queryParameters.set('to', <any>to);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GSTR9Report>('get',`${this.basePath}/admin/inventory/GSTReportService/getGSTR9Report`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getGstr2MatchingReport
     * 
     * @param from 
     * @param to 
     * @param filepath 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGstr2MatchingReportForm(from?: string, to?: string, filepath?: Blob, observe?: 'body', reportProgress?: boolean): Observable<Gstr2MatchingReport>;
    public getGstr2MatchingReportForm(from?: string, to?: string, filepath?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Gstr2MatchingReport>>;
    public getGstr2MatchingReportForm(from?: string, to?: string, filepath?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Gstr2MatchingReport>>;
    public getGstr2MatchingReportForm(from?: string, to?: string, filepath?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (from !== undefined) {
            formParams = formParams.append('from', <any>from) as any || formParams;
        }
        if (to !== undefined) {
            formParams = formParams.append('to', <any>to) as any || formParams;
        }
        if (filepath !== undefined) {
            formParams = formParams.append('filepath', <any>filepath) as any || formParams;
        }

        return this.httpClient.request<Gstr2MatchingReport>('post',`${this.basePath}/admin/inventory/GSTReportService/getGstr2MatchingReport`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
