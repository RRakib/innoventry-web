/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { IStitchingItem } from '../model/iStitchingItem';
import { IStitchingItemLine } from '../model/iStitchingItemLine';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StitchingItemLineServiceService {

    protected basePath = '/rest';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getItemNameForCustomer
     * 
     * @param iCustomer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemNameForCustomer(iCustomer?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<IStitchingItem>>;
    public getItemNameForCustomer(iCustomer?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IStitchingItem>>>;
    public getItemNameForCustomer(iCustomer?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IStitchingItem>>>;
    public getItemNameForCustomer(iCustomer?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (iCustomer !== undefined && iCustomer !== null) {
            queryParameters = queryParameters.set('iCustomer', <any>iCustomer);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IStitchingItem>>('get',`${this.basePath}/admin/tailor/StitchingItemLineService/getItemNameForCustomer`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getItemNames
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemNames(observe?: 'body', reportProgress?: boolean): Observable<Array<IStitchingItem>>;
    public getItemNames(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IStitchingItem>>>;
    public getItemNames(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IStitchingItem>>>;
    public getItemNames(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IStitchingItem>>('get',`${this.basePath}/admin/tailor/StitchingItemLineService/getItemNames`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getItemsForImage
     * 
     * @param tx 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getItemsForImage(tx?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<IStitchingItemLine>>;
    public getItemsForImage(tx?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IStitchingItemLine>>>;
    public getItemsForImage(tx?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IStitchingItemLine>>>;
    public getItemsForImage(tx?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tx !== undefined && tx !== null) {
            queryParameters = queryParameters.set('tx', <any>tx);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IStitchingItemLine>>('get',`${this.basePath}/admin/tailor/StitchingItemLineService/getItemsForImage`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getStitchingItemLinesForDeliveryTx
     * 
     * @param iCustomer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStitchingItemLinesForDeliveryTx(iCustomer?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<IStitchingItemLine>>;
    public getStitchingItemLinesForDeliveryTx(iCustomer?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IStitchingItemLine>>>;
    public getStitchingItemLinesForDeliveryTx(iCustomer?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IStitchingItemLine>>>;
    public getStitchingItemLinesForDeliveryTx(iCustomer?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (iCustomer !== undefined && iCustomer !== null) {
            queryParameters = queryParameters.set('iCustomer', <any>iCustomer);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IStitchingItemLine>>('get',`${this.basePath}/admin/tailor/StitchingItemLineService/getStitchingItemLinesForDeliveryTx`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getStitchingItemLinesForVendorTx
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStitchingItemLinesForVendorTx(observe?: 'body', reportProgress?: boolean): Observable<Array<IStitchingItemLine>>;
    public getStitchingItemLinesForVendorTx(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IStitchingItemLine>>>;
    public getStitchingItemLinesForVendorTx(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IStitchingItemLine>>>;
    public getStitchingItemLinesForVendorTx(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<IStitchingItemLine>>('get',`${this.basePath}/admin/tailor/StitchingItemLineService/getStitchingItemLinesForVendorTx`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
